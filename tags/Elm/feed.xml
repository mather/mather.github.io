<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://gohugo.io/" version="0.127.0">Hugo</generator><title>Elm on Reveal My Ignorance</title><subtitle>Blog by Eisuke Kuwahata</subtitle><link href="https://mather.github.io/tags/Elm/" rel="alternate" type="text/html" title="html"/><link href="https://mather.github.io/tags/Elm/feed.xml" rel="self" type="application/atom+xml" title="atom"/><updated>2024-06-06T15:43:49+00:00</updated><id>https://mather.github.io/tags/Elm/</id><entry><title>SyncTimerのコードをいくつかのモジュールに分解した</title><link href="https://mather.github.io/posts/2023/03/synctimer-split-modules/" rel="alternate" type="text/html" hreflang="en"/><id>https://mather.github.io/posts/2023/03/synctimer-split-modules/</id><published>2023-03-13T17:28:02+09:00</published><updated>2023-03-13T17:28:02+09:00</updated><content type="html">
&lt;p>これまで &lt;code>Main.elm&lt;/code> だけで作ってきた Elm のコードが増えて見通しが悪くなってきたので、いくつかのモジュールに分解した。
今回はリファクタリングなので機能の変更はなし。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="モジュールへの分解"
>
モジュールへの分解
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2023/03/synctimer-split-modules/#モジュールへの分解" class="gblog-post__anchor clip flex align-center" aria-label="Anchor モジュールへの分解" href="#%e3%83%a2%e3%82%b8%e3%83%a5%e3%83%bc%e3%83%ab%e3%81%b8%e3%81%ae%e5%88%86%e8%a7%a3">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>分解前のコードが691行になっていた。ここまで増えるとスクロールも疲れるし、どこに何があるかわからなくなってしまう。&lt;/p>
&lt;p>そこで、大きな構成要素を整理しモジュールに分けてみることにした。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Main.elm&lt;/code>
&lt;ul>
&lt;li>&lt;code>main&lt;/code> 関数、および起動時のパラメータ管理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Model.elm&lt;/code>
&lt;ul>
&lt;li>&lt;code>Model&lt;/code> 型を中心としたデータの定義とデータの変換に関する関数群。&lt;/li>
&lt;li>&lt;code>Cmd Msg&lt;/code> , &lt;code>Html Msg&lt;/code> を含まない純粋なもの。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Msg.elm&lt;/code>
&lt;ul>
&lt;li>&lt;code>Msg&lt;/code> 型、 &lt;code>update&lt;/code> 関数の定義。&lt;/li>
&lt;li>ユーザーインタラクションに対するふるまい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>View.elm&lt;/code>
&lt;ul>
&lt;li>&lt;code>view&lt;/code> 関数の定義。&lt;/li>
&lt;li>画面表示に関するもの。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>Analytics.elm&lt;/code>
&lt;ul>
&lt;li>Google Analytics 向けのイベント送信の定義。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>どうやって分解するかは我流だが、それぞれのファイルがどのライブラリやモジュールに依存するか見るとだいぶスッキリしたように見える。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="import-で見る依存関係"
>
import で見る依存関係
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2023/03/synctimer-split-modules/#import-で見る依存関係" class="gblog-post__anchor clip flex align-center" aria-label="Anchor import で見る依存関係" href="#import-%e3%81%a7%e8%a6%8b%e3%82%8b%e4%be%9d%e5%ad%98%e9%96%a2%e4%bf%82">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>それぞれのファイルから &lt;code>import&lt;/code> を抜き出してみる。&lt;/p>
&lt;p>&lt;code>Main.elm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Browser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Browser.Events&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Model&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Model&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Setting&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">decodeBgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">decodeBoolean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">decodeFgFont&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Msg&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Msg&lt;/span>&lt;span class="nf">(..)&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">update&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">View&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">view&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>main&lt;/code> 関数はすべての起点なので &lt;code>Model&lt;/code>, &lt;code>Msg&lt;/code>, &lt;code>View&lt;/code> のモジュールを使っていることは当然なのだが、
それ以外が &lt;code>main&lt;/code> 関数を作るための &lt;code>Browser&lt;/code> と、 &lt;code>subscriptions&lt;/code> に使う &lt;code>Browser.Events&lt;/code> だけになっていてかなりシンプルになった。&lt;/p>
&lt;p>&lt;code>Model.elm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Dict&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Time&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>たったこれだけ。他のモジュールへの依存もなく、データを中心とした純粋なモジュールになった。&lt;/p>
&lt;p>&lt;code>Msg.elm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Analytics&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">timerFastForwardEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">timerPauseEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">timerResetEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">timerRewindEvent&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">timerStartEvent&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Dict&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Model&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">BgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">FgFont&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Model&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Setting&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">encodeBgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">encodeBoolean&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">encodeFgFont&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Url.Builder&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="kt">UB&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>設定の更新時にURLを同期させる目的で &lt;code>Url.Builder&lt;/code> を使用している以外は、 &lt;code>View&lt;/code> にも依存しておらず &lt;code>Model&lt;/code> を中心に動作していることがはっきりしている。&lt;/p>
&lt;p>&lt;code>View.elm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Html&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Attribute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Html&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">button&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">details&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">div&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">input&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">label&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">select&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">span&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">summary&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">text&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Html.Attributes&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="kt">A&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">attribute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">checked&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">for&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">selected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">step&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">style&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">type_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Html.Events&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">onClick&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">onInput&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Model&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">BgColor&lt;/span>&lt;span class="nf">(..)&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">FgFont&lt;/span>&lt;span class="nf">(..)&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Model&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Setting&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">decodeBgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">decodeFgFont&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">encodeBgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">encodeFgFont&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Msg&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Msg&lt;/span>&lt;span class="nf">(..)&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Model&lt;/code>, &lt;code>Msg&lt;/code> に依存しているのは言うまでもないが、それ以外は完全に &lt;code>Html&lt;/code> 関連のインポートだけになっている。
逆に言えば、 &lt;code>Html&lt;/code> 関連のインポートは &lt;code>View.elm&lt;/code> だけしか存在しない。&lt;/p>
&lt;p>&lt;code>Analytics.elm&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">port&lt;/span> &lt;span class="kr">module&lt;/span> &lt;span class="kt">Analytics&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="nf">(..)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Json.Encode&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="kt">E&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Model&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Setting&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">encodeBgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">encodeFgFont&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Analytics に送信するための &lt;code>port&lt;/code> の定義もここに配置したので最初の宣言が &lt;code>port module&lt;/code> となっている。
また、 &lt;code>Json&lt;/code> 関連のモジュールもここでしか使わないことが明確になっている。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="変更前の-import-を見てみる"
>
変更前の import を見てみる
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2023/03/synctimer-split-modules/#変更前の-import-を見てみる" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 変更前の import を見てみる" href="#%e5%a4%89%e6%9b%b4%e5%89%8d%e3%81%ae-import-%e3%82%92%e8%a6%8b%e3%81%a6%e3%81%bf%e3%82%8b">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>変更前はどうだったかというと、当たり前だが上記を全部放り込んだ形になっている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Browser&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Dict&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Html&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Attribute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Html&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">button&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">details&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">div&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">input&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">label&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">option&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">select&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">span&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">summary&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">text&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Html.Attributes&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="kt">A&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">attribute&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">checked&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">class&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">for&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">selected&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">step&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">style&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">type_&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Html.Events&lt;/span> &lt;span class="nv">exposing&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">onClick&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">onInput&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Json.Encode&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="kt">E&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import &lt;/span>&lt;span class="nc">Url.Builder&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="kt">UB&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>どこかで使ってるんだろうな、ということは理解できるものの、やはり見通しが悪くなるのは否めない。
（フォーマッタがよしなに整理してくれて使ってないモジュールもエディタがグレーアウトしてくれるのでなんとかなっているが）&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="スコープは小さく依存も小さく"
>
スコープは小さく、依存も小さく
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2023/03/synctimer-split-modules/#スコープは小さく依存も小さく" class="gblog-post__anchor clip flex align-center" aria-label="Anchor スコープは小さく、依存も小さく" href="#%e3%82%b9%e3%82%b3%e3%83%bc%e3%83%97%e3%81%af%e5%b0%8f%e3%81%95%e3%81%8f%e4%be%9d%e5%ad%98%e3%82%82%e5%b0%8f%e3%81%95%e3%81%8f">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>アプリケーションコードが持っている構造を見えるように整理することは読み手を手助けしてくれるし、一つのモジュールについて集中して考えるときに余計なコードが目につかなくなる。&lt;/p>
&lt;p>また、モジュールに分解されたことで変更履歴の差分をファイル一覧で見るだけでもどこに変更が加わったか予想しやすくなったりする。&lt;/p>
&lt;p>この規模のコードで一人で開発している分にはメリットはあまりないと思うかもしれないが、逆に大規模になったりチームで開発するときはこのようなリファクタリングを行うタイミングすら少なくなり、
「いつかコードを整理したい」と思っていても練習すらままならない状態でいきなり取り掛かることも難しいので実現できないリファクタリングをいつまでも夢見ることになる。&lt;/p>
&lt;p>コードの構造に注目して分解するなどのリファクタリングの実践練習は自己責任で変更できる小さいプロダクトで試しておくのがいいかもしれない。&lt;/p></content><category scheme="https://mather.github.io/categories/SyncTimer%E9%96%8B%E7%99%BA" term="SyncTimer%E9%96%8B%E7%99%BA" label="SyncTimer開発"/><category scheme="https://mather.github.io/tags/%E6%8A%80%E8%A1%93" term="%E6%8A%80%E8%A1%93" label="技術"/><category scheme="https://mather.github.io/tags/Elm" term="Elm" label="Elm"/></entry><entry><title>Mini Type Puzzle</title><link href="https://mather.github.io/posts/2022/12/mini-type-puzzle/" rel="alternate" type="text/html" hreflang="en"/><id>https://mather.github.io/posts/2022/12/mini-type-puzzle/</id><published>2022-12-07T17:39:53+09:00</published><updated>2022-12-07T17:39:53+09:00</updated><content type="html">
&lt;p>飛び入りで &lt;a
class="gblog-markdown__link"
href="https://qiita.com/advent-calendar/2022/elm"
>Elm アドベントカレンダー 2022&lt;/a> の12/7の記事を書いてみようと思う。&lt;/p>
&lt;p>とはいえ何も準備していないので、最近の気持ちよかったことを書く。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="関数がピッタリハマったときの気持ちよさ"
>
関数がピッタリハマったときの気持ちよさ
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/mini-type-puzzle/#関数がピッタリハマったときの気持ちよさ" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 関数がピッタリハマったときの気持ちよさ" href="#%e9%96%a2%e6%95%b0%e3%81%8c%e3%83%94%e3%83%83%e3%82%bf%e3%83%aa%e3%83%8f%e3%83%9e%e3%81%a3%e3%81%9f%e3%81%a8%e3%81%8d%e3%81%ae%e6%b0%97%e6%8c%81%e3%81%a1%e3%82%88%e3%81%95">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>&lt;a
class="gblog-markdown__link"
href="https://github.com/mather/sync-timer"
>趣味で作っているタイマー&lt;/a>のコードをぼちぼちいじってたときに、ラジオボタンをセレクトボックスに変更しようと思って書き換えていた。&lt;/p>
&lt;p>これまでのラジオボタンなら、各 &lt;code>input&lt;/code> の属性に &lt;code>onClick &amp;lt;| SetBgColor GreenBack&lt;/code> などのように個別に記述すればよかったのだが、 &lt;code>select&lt;/code> になると &lt;code>onInput : String -&amp;gt; Msg&lt;/code> を使う必要が出てくる。&lt;/p>
&lt;p>でまぁ文字列を変換するコードをちまちま書けばいいじゃないか、という話なのだが、今回はこれまでに書いていたいくつかのパーツがきれいにハマって書くことができたのでちょっと嬉しかったのだ。&lt;/p>
&lt;p>あらかじめ言っておくと、タイトルにいうほどのパズルではないと思うので期待はしないでいただきたい。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="文字列を代数的データ型に"
>
文字列を代数的データ型に
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/mini-type-puzzle/#文字列を代数的データ型に" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 文字列を代数的データ型に" href="#%e6%96%87%e5%ad%97%e5%88%97%e3%82%92%e4%bb%a3%e6%95%b0%e7%9a%84%e3%83%87%e3%83%bc%e3%82%bf%e5%9e%8b%e3%81%ab">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>設定情報をクエリ文字列に変換し、クエリ文字列から設定を復元する、という仕様のため、文字列から代数的データ型の変換を行っている。
このとき便利なのが &lt;code>Dict&lt;/code> で、次のように対応関係を定義していた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="kt">BgColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">=&lt;/span> &lt;span class="kt">Transparent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">|&lt;/span> &lt;span class="kt">GreenBack&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">|&lt;/span> &lt;span class="kt">BlueBack&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">dictBgColor&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="kt">Dict&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="kt">BgColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">dictBgColor&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">let&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">pairwise&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span> &lt;span class="nv">encodeBgColor&lt;/span> &lt;span class="nv">bgColor&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">Dict&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">fromList&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="kt">List&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">map&lt;/span> &lt;span class="nv">pairwise&lt;/span> &lt;span class="p">[&lt;/span> &lt;span class="kt">GreenBack&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">BlueBack&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Transparent&lt;/span> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これは以前 &lt;a
class="gblog-markdown__link--code"
href="https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query#enum"
>&lt;code>Url.Parser.Query.enum&lt;/code>&lt;/a> を使っていたときの名残だ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">enum&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Dict&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Parser&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Maybe&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そもそも、 &lt;a
class="gblog-markdown__link--code"
href="https://package.elm-lang.org/packages/elm/core/latest/Dict#get"
>&lt;code>Dict.get&lt;/code>&lt;/a> が似たようなことをしている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">get&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="nv">comparable&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Dict&lt;/span> &lt;span class="nv">comparable&lt;/span> &lt;span class="nv">v&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="nv">v&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、この関数の都合の悪いのは引数の順番である。 &lt;code>Dict comparable v&lt;/code> の部分を固定して使いたいときに不便だ。
そこで、関数型のアイデアとしては &lt;code>flip : (a -&amp;gt; b -&amp;gt; c) -&amp;gt; b -&amp;gt; a -&amp;gt; c&lt;/code> を使いたくなるのだが、 &lt;a
class="gblog-markdown__link"
href="https://github.com/elm/compiler/blob/master/docs/upgrade-instructions/0.19.0.md#functions-removed"
>Elmではすでに削除されている&lt;/a>ので簡単に実装する。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">flip&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">a&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="nv">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="nv">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">flip&lt;/span> &lt;span class="nv">f&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">f&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="nv">a&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>さて、これによって &lt;code>String -&amp;gt; Maybe BgColor&lt;/code> という対応関係が作れる&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">flip&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">get&lt;/span> &lt;span class="nv">dictBgColor&lt;/span> &lt;span class="c1">-- String -&amp;gt; Maybe BgColor&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="msg-に変換する"
>
&lt;code>Msg&lt;/code> に変換する
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/mini-type-puzzle/#msg-に変換する" class="gblog-post__anchor clip flex align-center" aria-label="Anchor Msg に変換する" href="#msg-%e3%81%ab%e5%a4%89%e6%8f%9b%e3%81%99%e3%82%8b">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>&lt;code>BgColor&lt;/code> の変更を伝える &lt;code>SetBgColor&lt;/code> が定義されていて、これは &lt;code>SetBgColor : BgColor -&amp;gt; Msg&lt;/code> とみなせるので、これを &lt;code>Maybe BgColor&lt;/code> に適用したい。
つまりは &lt;code>Maybe.map&lt;/code> を使えば良い。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">map&lt;/span> &lt;span class="kt">SetBgColor&lt;/span> &lt;span class="c1">-- Maybe BgColor -&amp;gt; Maybe Msg&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="maybe-msg-のままでは渡せない"
>
&lt;code>Maybe Msg&lt;/code> のままでは渡せない
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/mini-type-puzzle/#maybe-msg-のままでは渡せない" class="gblog-post__anchor clip flex align-center" aria-label="Anchor Maybe Msg のままでは渡せない" href="#maybe-msg-%e3%81%ae%e3%81%be%e3%81%be%e3%81%a7%e3%81%af%e6%b8%a1%e3%81%9b%e3%81%aa%e3%81%84">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>&lt;code>onInput : (String -&amp;gt; Msg) -&amp;gt; Html.Attribute Msg&lt;/code> のシグネチャには &lt;code>Msg&lt;/code> が要求されるので最後は &lt;code>Maybe&lt;/code> ではだめだ。&lt;/p>
&lt;p>実際にはそんなケースは発生しないことはわかっているのだが、入力が &lt;code>String&lt;/code> である以上はイレギュラーなケースもカバーしなければならない。&lt;/p>
&lt;p>そこで、 &lt;code>NoOp&lt;/code> という値が役に立つ。もし &lt;code>BgColor&lt;/code> に該当しないイレギュラーな値が入力されたときは最終的に「何もしない」が送信される。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">withDefault&lt;/span> &lt;span class="kt">NoOp&lt;/span> &lt;span class="c1">-- Maybe Msg -&amp;gt; Msg&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="関数合成"
>
関数合成
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/mini-type-puzzle/#関数合成" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 関数合成" href="#%e9%96%a2%e6%95%b0%e5%90%88%e6%88%90">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>3つの関数の入力と出力がうまい具合に噛み合った。あとはこれを合成するだけだ。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">selectBgColor&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Msg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">selectBgColor&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">flip&lt;/span> &lt;span class="kt">Dict&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">get&lt;/span> &lt;span class="nv">dictBgColor&lt;/span> &lt;span class="nf">&amp;gt;&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">map&lt;/span> &lt;span class="kt">SetBgColor&lt;/span> &lt;span class="nf">&amp;gt;&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">withDefault&lt;/span> &lt;span class="kt">NoOp&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>カッコもなくスッキリと合成できた。
一つ一つのシンプルな仕組みがうまく合致して整理できたときはやっぱり嬉しいな。&lt;/p></content><category scheme="https://mather.github.io/tags/%E6%8A%80%E8%A1%93" term="%E6%8A%80%E8%A1%93" label="技術"/><category scheme="https://mather.github.io/tags/Elm" term="Elm" label="Elm"/></entry><entry><title>Elmアプリケーションとしての規模を小さくする</title><link href="https://mather.github.io/posts/2022/12/reduce-elm-scope/" rel="alternate" type="text/html" hreflang="en"/><id>https://mather.github.io/posts/2022/12/reduce-elm-scope/</id><published>2022-12-04T17:00:00+09:00</published><updated>2022-12-04T17:00:00+09:00</updated><content type="html">
&lt;p>SyncTimerのリファクタリングを行った。今回のテーマは「どこまでをElmで管理すべきか？」ということ。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="疑問リンククリックの挙動は管理されるべきか"
>
疑問：リンククリックの挙動は管理されるべきか？
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/reduce-elm-scope/#疑問リンククリックの挙動は管理されるべきか" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 疑問：リンククリックの挙動は管理されるべきか？" href="#%e7%96%91%e5%95%8f%e3%83%aa%e3%83%b3%e3%82%af%e3%82%af%e3%83%aa%e3%83%83%e3%82%af%e3%81%ae%e6%8c%99%e5%8b%95%e3%81%af%e7%ae%a1%e7%90%86%e3%81%95%e3%82%8c%e3%82%8b%e3%81%b9%e3%81%8d%e3%81%8b">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>紹介ページを作ったことで2ページ目への遷移を行うようになったが、ここで一つ気になるポイントが生まれた。
単純なリンクのクリックであっても、 &lt;code>Browser.application&lt;/code> では &lt;code>Msg&lt;/code> として管理しなければならないという回りくどい部分だ。&lt;/p>
&lt;p>&lt;a
class="gblog-markdown__link"
href="https://github.com/mather/sync-timer/blob/bb98a2ad01d76184d9073f9a85a867e09d754a0b/src/Main.elm#L499-L501"
>https://github.com/mather/sync-timer/blob/bb98a2ad01d76184d9073f9a85a867e09d754a0b/src/Main.elm#L499-L501&lt;/a>&lt;/p>
&lt;p>これまでのリンクはすべて新規タブで開くようにしていたので該当しなかったが、
&lt;a
class="gblog-markdown__link--code"
href="https://package.elm-lang.org/packages/elm/browser/latest/Browser#application"
>&lt;code>Browser.application&lt;/code>&lt;/a> はSPAのような挙動を想定して作られているため、
リクエストされたURLをアプリケーションで処理すべきか、ブラウザ上のページ遷移として扱うべきかをコントロールする必要があるのだ。&lt;/p>
&lt;p>そもそもなぜ &lt;code>Browser.application&lt;/code> を使っていたのかというと、設定変更時にブラウザのURLを書き換えて反映させるためだった。
では、その機能や静的なコンテンツであるヘッダー・フッターを HTML、JS 側に移動させるとElmが管理すべき対象はどのくらいシンプルになるのか？&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="アプリケーションの挙動として管理しなくてよい部分"
>
アプリケーションの挙動として管理しなくてよい部分
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/reduce-elm-scope/#アプリケーションの挙動として管理しなくてよい部分" class="gblog-post__anchor clip flex align-center" aria-label="Anchor アプリケーションの挙動として管理しなくてよい部分" href="#%e3%82%a2%e3%83%97%e3%83%aa%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae%e6%8c%99%e5%8b%95%e3%81%a8%e3%81%97%e3%81%a6%e7%ae%a1%e7%90%86%e3%81%97%e3%81%aa%e3%81%8f%e3%81%a6%e3%82%88%e3%81%84%e9%83%a8%e5%88%86">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;ul>
&lt;li>&lt;code>Browser.application&lt;/code> と &lt;code>Browser.document&lt;/code> はページ全体を管理するためHTMLのタイトルなども管理対象だったが必要ない。&lt;/li>
&lt;li>ヘッダー部分、フッター部分はタイマーの挙動とは関係なく固定されている。&lt;/li>
&lt;/ul>
&lt;p>上記のような見直しの結果、タイマーの表示・コントロール・設定の部分のみを切り出して &lt;a
class="gblog-markdown__link--code"
href="https://package.elm-lang.org/packages/elm/browser/latest/Browser#element"
>&lt;code>Browser.element&lt;/code>&lt;/a> で実装することにした。
ただし、このままではブラウザのURLを設定に合わせて変更させる機能が動かなくなるので、JSを使って連動させることにした。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="読み込み時の初期値をelmに取り込む"
>
読み込み時の初期値をElmに取り込む
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/reduce-elm-scope/#読み込み時の初期値をelmに取り込む" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 読み込み時の初期値をElmに取り込む" href="#%e8%aa%ad%e3%81%bf%e8%be%bc%e3%81%bf%e6%99%82%e3%81%ae%e5%88%9d%e6%9c%9f%e5%80%a4%e3%82%92elm%e3%81%ab%e5%8f%96%e3%82%8a%e8%be%bc%e3%82%80">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>&lt;code>Browser.element&lt;/code> ではリクエストされたURLを取得することはできないので、JSで取得してElmアプリケーションに渡す必要がある。
そのため、以下のようなコードを記述してクエリ文字列のパースを行うことにした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">parseParams&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">searchParams&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nx">URL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">)).&lt;/span>&lt;span class="nx">searchParams&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">parseFg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">re&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/^#[0-9a-f]{6}$/&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">re&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">test&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">parseInit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">parseInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">30&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">30&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fg&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">parseFg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">searchParams&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fg&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bg&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">searchParams&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;bg&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">init&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">parseInit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">searchParams&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">)),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">h&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">searchParams&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;h&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">Elm&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">init&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">node&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flags&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">parseParams&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>RGB値、数値に関してはバリデーションや型変換を行い、 Elmアプリケーションの &lt;code>flags&lt;/code> にシンプルなJavaScriptオブジェクトとして渡すだけ。
仮にパースに失敗しても、 &lt;code>null&lt;/code> を渡すことでデフォルト値を採用するようにしている。&lt;/p>
&lt;p>Elm側は &lt;code>flags&lt;/code> の値を次のように処理している。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="kr">alias&lt;/span> &lt;span class="kt">SettingFromQuery&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nv">fg&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">bg&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">init&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">h&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">parseSettingFromQuery&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">SettingFromQuery&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Setting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">parseSettingFromQuery&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nv">fgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">fg&lt;/span> &lt;span class="nf">|&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">withDefault&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">fgColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">bg&lt;/span> &lt;span class="nf">|&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">andThen&lt;/span> &lt;span class="nv">decodeBgColor&lt;/span> &lt;span class="nf">|&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">withDefault&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">bgColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">initialTimeSeconds&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">init&lt;/span> &lt;span class="nf">|&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">withDefault&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">initialTimeSeconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">showHour&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">h&lt;/span> &lt;span class="nf">|&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">andThen&lt;/span> &lt;span class="nv">decodeShowHour&lt;/span> &lt;span class="nf">|&amp;gt;&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">withDefault&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">showHour&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">initialModel&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">SettingFromQuery&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="kt">Model&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">Cmd&lt;/span> &lt;span class="kt">Msg&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">initialModel&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">let&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">initSetting&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">parseSettingFromQuery&lt;/span> &lt;span class="nv">setting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nv">timeMillis&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">initSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">initialTimeSeconds&lt;/span> &lt;span class="nf">*&lt;/span> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">paused&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="kt">True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">current&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="kt">Nothing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">parseSettingFromQuery&lt;/span> &lt;span class="nv">setting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="kt">Cmd&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">none&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Browser.element&lt;/code> では &lt;code>flags&lt;/code> は型引数なので、入力値の型を &lt;code>SettingFromQuery&lt;/code> と定義する。
もしこの型に構造や値が合致しないデータがElmアプリケーションの起動時に渡された場合、Elmアプリケーションはエラーを起こし起動しない。実に潔い。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="設定変更を-ports-で送信する"
>
設定変更を Ports で送信する
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/reduce-elm-scope/#設定変更を-ports-で送信する" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 設定変更を Ports で送信する" href="#%e8%a8%ad%e5%ae%9a%e5%a4%89%e6%9b%b4%e3%82%92-ports-%e3%81%a7%e9%80%81%e4%bf%a1%e3%81%99%e3%82%8b">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>すでに Google Analytics の際に Ports を使ってElmアプリケーション外部への挙動は実装していたが、今回はURLを書き換える機能を呼び出す Ports を作成する。&lt;/p>
&lt;p>Elm側は設定の変更時に &lt;code>setQueryString&lt;/code>, &lt;code>urlFromSetting&lt;/code> 関数を呼び出している。(背景色変更の例)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">SetBgColor&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nv">model&lt;/span> &lt;span class="nf">|&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">|&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">setQueryString&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="nv">urlFromSetting&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">|&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これらはそれぞれ次のように定義されている。 &lt;code>port setQueryString : String -&amp;gt; Cmd msg&lt;/code> が Ports として外部に実装されている関数を呼び出すことを宣言していることになる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">port&lt;/span> &lt;span class="nv">setQueryString&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Cmd&lt;/span> &lt;span class="nv">msg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">urlFromSetting&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Setting&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">urlFromSetting&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">UB&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">toQuery&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span> &lt;span class="kt">UB&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">string&lt;/span> &lt;span class="s">&amp;#34;fg&amp;#34;&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">fgColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="kt">UB&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">string&lt;/span> &lt;span class="s">&amp;#34;bg&amp;#34;&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="nv">encodeBgColor&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">bgColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="kt">UB&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">int&lt;/span> &lt;span class="s">&amp;#34;init&amp;#34;&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">initialTimeSeconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="kt">UB&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">string&lt;/span> &lt;span class="s">&amp;#34;h&amp;#34;&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="nv">encodeShowHour&lt;/span> &lt;span class="nv">setting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">showHour&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>JS側では受け取ったクエリ文字列をURLにセットしている。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ports&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setQueryString&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">newQS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">currentUrl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">URL&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">newUrl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">currentUrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">origin&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">currentUrl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pathname&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">newQS&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">replaceState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newUrl&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで一応同じ挙動を実装することができた。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="elmの行数"
>
Elmの行数
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/12/reduce-elm-scope/#elmの行数" class="gblog-post__anchor clip flex align-center" aria-label="Anchor Elmの行数" href="#elm%e3%81%ae%e8%a1%8c%e6%95%b0">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>修正の結果、 &lt;code>src/Main.elm&lt;/code> の行数は567行から486行に減った。
そんなに減ってないように見えるが、Elmアプリケーションとして管理する範囲がシンプルになったのと、
アプリケーションの挙動に影響しないヘッダー・フッター部分の修正が &lt;code>Main.elm&lt;/code> で行われないことがわかっているとすごく楽に感じられる。&lt;/p></content><category scheme="https://mather.github.io/tags/%E6%8A%80%E8%A1%93" term="%E6%8A%80%E8%A1%93" label="技術"/><category scheme="https://mather.github.io/tags/Elm" term="Elm" label="Elm"/><category scheme="https://mather.github.io/tags/SyncTimer" term="SyncTimer" label="SyncTimer"/></entry><entry><title>SyncTimerのリファクタリング</title><link href="https://mather.github.io/posts/2022/11/sync-timer-refactor/" rel="alternate" type="text/html" hreflang="en"/><id>https://mather.github.io/posts/2022/11/sync-timer-refactor/</id><published>2022-11-15T22:32:53+09:00</published><updated>2022-11-15T22:32:53+09:00</updated><content type="html">
&lt;p>&lt;a
class="gblog-markdown__link"
href="https://github.com/mather/sync-timer/pull/45"
>SyncTimerのコードをリファクタリング&lt;/a>してみた。&lt;/p>
&lt;p>リファクタリングとは、動作を変更させずにコードを整理する作業のことである。
繰り返している無駄な機能をまとめたり、わかりやすく整理することで保守しやすくすることができる。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="リセット時の初期秒数を-setting-にまとめる"
>
リセット時の初期秒数を Setting にまとめる
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/11/sync-timer-refactor/#リセット時の初期秒数を-setting-にまとめる" class="gblog-post__anchor clip flex align-center" aria-label="Anchor リセット時の初期秒数を Setting にまとめる" href="#%e3%83%aa%e3%82%bb%e3%83%83%e3%83%88%e6%99%82%e3%81%ae%e5%88%9d%e6%9c%9f%e7%a7%92%e6%95%b0%e3%82%92-setting-%e3%81%ab%e3%81%be%e3%81%a8%e3%82%81%e3%82%8b">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>作るときの順番としてたまたま &lt;code>initialTimeSeconds&lt;/code> の値が &lt;code>Model&lt;/code> に含まれておりそのままにしていたのだが、
文字色や背景色の設定を追加されたことで複数の設定項目をまとめたくなり、 &lt;code>Setting&lt;/code> という型を作成してまとめた。&lt;/p>
&lt;p>内容的に &lt;code>Setting&lt;/code> がタイマーの表示の設定値のみであるように思っていたのだが、
よくよく考えるとクエリ文字列に保存している値を作るために &lt;code>initialTimeSeconds&lt;/code> と渡しているので、これもいわゆる設定値である。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">urlFromConfig&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">BgColor&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Int&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">urlFromConfig&lt;/span> &lt;span class="nv">fg&lt;/span> &lt;span class="nv">bg&lt;/span> &lt;span class="nv">initialTimeSeconds&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nf">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ということで、この後のことも考えて設定値全般を &lt;code>Setting&lt;/code> にまとめることにした。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="設定の初期値をまとめる"
>
設定の初期値をまとめる
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/11/sync-timer-refactor/#設定の初期値をまとめる" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 設定の初期値をまとめる" href="#%e8%a8%ad%e5%ae%9a%e3%81%ae%e5%88%9d%e6%9c%9f%e5%80%a4%e3%82%92%e3%81%be%e3%81%a8%e3%82%81%e3%82%8b">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>これまでクエリ文字列をパースしたときに設定値が指定されていない場合に初期値を設定するように定義していた。
しかし、当初よりも設定情報の種類が増えそうな予感がしたので、
あちこちに散らばるより &lt;code>Setting&lt;/code> 型の初期値 &lt;code>defaultSetting&lt;/code> を具体的に一つ定義してあげたほうが適切だと思い、
一つの値として整理した。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">defaultSetting&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Setting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">defaultSetting&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nv">fgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="s">&amp;#34;#415462&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="kt">GreenBack&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">initialTimeSeconds&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nf">-&lt;/span>&lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="urlparserquery-の仕組みを上手く使う"
>
Url.Parser.Query の仕組みを上手く使う
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/11/sync-timer-refactor/#urlparserquery-の仕組みを上手く使う" class="gblog-post__anchor clip flex align-center" aria-label="Anchor Url.Parser.Query の仕組みを上手く使う" href="#urlparserquery-%e3%81%ae%e4%bb%95%e7%b5%84%e3%81%bf%e3%82%92%e4%b8%8a%e6%89%8b%e3%81%8f%e4%bd%bf%e3%81%86">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>クエリ文字列からパラメータを取り出す処理に &lt;a
class="gblog-markdown__link--code"
href="https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query"
>&lt;code>Url.Parser.Query&lt;/code>&lt;/a> を使っているが、
これまでは &lt;code>Query.string&lt;/code> などの関数を用いて得られる &lt;code>Maybe String&lt;/code> などの値をそのまま利用していた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">string&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">String&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Parser&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>そのため、得られる値を定義した型 &lt;code>InitParams&lt;/code> が &lt;code>Setting&lt;/code> とほぼ同じ内容ですべて &lt;code>Maybe&lt;/code> がついた状態となっていた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="kr">alias&lt;/span> &lt;span class="kt">InitParams&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nv">fgColor&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">BgColor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">,&lt;/span> &lt;span class="nv">initialTimeSeconds&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Maybe&lt;/span> &lt;span class="kt">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、改めて考えてみると &lt;code>Parser (Maybe String)&lt;/code> に初期値を加えてあらかじめ &lt;code>Parser String&lt;/code> に変換しておけばよい。
ということで以下の処理を加えた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">parserWithDefault&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="kt">Parser&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">Maybe&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="kt">Parser&lt;/span> &lt;span class="nv">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">parserWithDefault&lt;/span> &lt;span class="nv">default&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">map&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="kt">Maybe&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">withDefault&lt;/span> &lt;span class="nv">default&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Query.map : (a -&amp;gt; b) -&amp;gt; Parser a -&amp;gt; Parser b&lt;/code> を用いることで「存在しなければ初期値を返す」という関数適用を行えば、&lt;code>Maybe&lt;/code> ではなく確実に値を返すパーサーが出来上がる。&lt;/p>
&lt;p>これを最後に &lt;a
class="gblog-markdown__link--code"
href="https://package.elm-lang.org/packages/elm/url/latest/Url-Parser-Query#map3"
>&lt;code>Query.map3&lt;/code>&lt;/a> を使って &lt;code>Setting&lt;/code> に変換することができる。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">queryParser&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="kt">Parser&lt;/span> &lt;span class="kt">Setting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">queryParser&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">map&lt;/span>&lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">Setting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nv">parserWithDefault&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">enum&lt;/span> &lt;span class="s">&amp;#34;bg&amp;#34;&lt;/span> &lt;span class="nv">dictBgColor&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nv">parserWithDefault&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">fgColor&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">string&lt;/span> &lt;span class="s">&amp;#34;fg&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nv">parserWithDefault&lt;/span> &lt;span class="nv">defaultSetting&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">initialTimeSeconds&lt;/span> &lt;span class="nf">&amp;lt;|&lt;/span> &lt;span class="kt">Query&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">int&lt;/span> &lt;span class="s">&amp;#34;init&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ここで &lt;code>Setting&lt;/code> そのものは本来は型エイリアスなのだが、3つの値を受け取って &lt;code>Setting&lt;/code> を返すコンストラクタとしても使えることに留意する。&lt;/p>
&lt;p>これにより &lt;code>InitParams&lt;/code> という中間処理の型が不要になった。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="ネストしたモデルの更新方法"
>
ネストしたモデルの更新方法
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/11/sync-timer-refactor/#ネストしたモデルの更新方法" class="gblog-post__anchor clip flex align-center" aria-label="Anchor ネストしたモデルの更新方法" href="#%e3%83%8d%e3%82%b9%e3%83%88%e3%81%97%e3%81%9f%e3%83%a2%e3%83%87%e3%83%ab%e3%81%ae%e6%9b%b4%e6%96%b0%e6%96%b9%e6%b3%95">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>そんな文法があることを知らなかっただけなのだが、ネストしたモデルの更新などに使える方法を見つけたので使ってみた。&lt;/p>
&lt;p>これまで、 &lt;code>update&lt;/code> には &lt;code>Model&lt;/code> の値をそのまま渡しており、その内部の &lt;code>Setting&lt;/code> の値を更新したいときは専用の関数を作ってこんな風にしていた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span> &lt;span class="nv">model&lt;/span> &lt;span class="nf">|&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">updateBgColor&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="nf">.&lt;/span>&lt;span class="nv">setting&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">updateBgColor&lt;/span> &lt;span class="nf">:&lt;/span> &lt;span class="kt">BgColor&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Setting&lt;/span> &lt;span class="nf">-&amp;gt;&lt;/span> &lt;span class="kt">Setting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">updateBgColor&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">|&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>しかし、関数の引数で受け取るときに &lt;code>{ setting } as model&lt;/code> という形でネストした値についても変数の束縛ができるのである。&lt;/p>
&lt;p>&lt;a
class="gblog-markdown__link"
href="https://faq.elm-community.org/#how-can-i-pattern-match-a-record-and-its-values-at-the-same-time"
>https://faq.elm-community.org/#how-can-i-pattern-match-a-record-and-its-values-at-the-same-time&lt;/a>&lt;/p>
&lt;p>そんなわけで、これを使えばわざわざ専用の関数を作る必要はなくシンプルに記述できた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-elm" data-lang="elm">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">update&lt;/span> &lt;span class="nv">msg&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="kr">as&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nf">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span> &lt;span class="nv">model&lt;/span> &lt;span class="nf">|&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nv">setting&lt;/span> &lt;span class="nf">|&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="nf">=&lt;/span> &lt;span class="nv">bgColor&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>「みんな面倒に思うポイントだしきっと良い解決方法があるはずだ」と思って探してみれば、やっぱりあるもんだ。納得するまでしつこく調べてみよう。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="リファクタリングは大事"
>
リファクタリングは大事
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2022/11/sync-timer-refactor/#リファクタリングは大事" class="gblog-post__anchor clip flex align-center" aria-label="Anchor リファクタリングは大事" href="#%e3%83%aa%e3%83%95%e3%82%a1%e3%82%af%e3%82%bf%e3%83%aa%e3%83%b3%e3%82%b0%e3%81%af%e5%a4%a7%e4%ba%8b">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>その他の細かい修正点もあるが、おおよそ上記のような修正を行った。&lt;/p>
&lt;p>リファクタリングは機能を追加することもなく変更を行うため、
ビジネスの現場では「生産性がない」「変更したことでバグを生むリスクがある」という考え方で避けられがちなのだが、
以下の面でメリットが大きいと思う。&lt;/p>
&lt;ul>
&lt;li>改めてコードを見ることで理解を深め、もっと良い方法に気づく&lt;/li>
&lt;li>出来上がっている機能から本質的な問題（今回でいうと初期時間が &lt;code>Setting&lt;/code> に含まれるべきであること）に還元できる&lt;/li>
&lt;/ul>
&lt;p>本来はリファクタリングを行う上で動作するテストを記述し「動作が変わっていないこと」を担保するのが良いが、
SyncTimerの場合はそもそも機能が少ないことやElmの純粋関数型の利点もあり十分信頼できるのでリファクタリングを行った。&lt;/p></content><category scheme="https://mather.github.io/categories/SyncTimer%E9%96%8B%E7%99%BA" term="SyncTimer%E9%96%8B%E7%99%BA" label="SyncTimer開発"/><category scheme="https://mather.github.io/tags/%E6%8A%80%E8%A1%93" term="%E6%8A%80%E8%A1%93" label="技術"/><category scheme="https://mather.github.io/tags/SyncTimer" term="SyncTimer" label="SyncTimer"/><category scheme="https://mather.github.io/tags/Elm" term="Elm" label="Elm"/></entry><entry><title>同時視聴配信用のタイマーを作った話</title><link href="https://mather.github.io/posts/2021/08/sync-timer/" rel="alternate" type="text/html" hreflang="en"/><id>https://mather.github.io/posts/2021/08/sync-timer/</id><published>2021-08-16T16:43:12+09:00</published><updated>2021-08-16T16:43:12+09:00</updated><content type="html">
&lt;p>作ったものはこちら&lt;/p>
&lt;p>&lt;a
class="gblog-markdown__link"
href="https://sync-timer.netlify.app/"
>https://sync-timer.netlify.app/&lt;/a>&lt;/p>
&lt;p>ソースコードはこちら&lt;/p>
&lt;p>&lt;a
class="gblog-markdown__link"
href="https://github.com/mather/simple-stopwatch"
>https://github.com/mather/simple-stopwatch&lt;/a>&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="経緯"
>
経緯
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2021/08/sync-timer/#経緯" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 経緯" href="#%e7%b5%8c%e7%b7%af">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>きっかけは 2020 年 8 月にとある VTuber の同時視聴配信でつぶやかれた一言。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">以前VTuberの磁富モノエさん( &lt;a href="https://twitter.com/Jitomi_Monoe?ref_src=twsrc%5Etfw">@Jitomi_Monoe&lt;/a> )の Nintendo Direct 同時視聴配信で「マイナスからスタートするストップウォッチがほしい」って話があったから、最近Elmを書いてなかったから試しに作ってみた。&lt;a href="https://t.co/kCVSEZBV0C">https://t.co/kCVSEZBV0C&lt;/a>&lt;/p>&amp;mdash; mather / Eisuke Kuwahata (@mather314) &lt;a href="https://twitter.com/mather314/status/1292112179018137600?ref_src=twsrc%5Etfw">August 8, 2020&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>誰かに使われる予定もなく自己満足で開発を終え早一年…。&lt;/p>
&lt;p>本当はグリーンバックとか入れたほうがいいのかな、とか考えながらやり残した感はあったのですが、細かく実装を追加してもどうせ使わないかと思うのでとりあえず放置していた。&lt;/p>
&lt;p>そんな折、きっかけとなった VTuber の方も突然の引退…。
「推しは推せるときに推しておけ」とはこのこと。&lt;/p>
&lt;p>しかし、そういったイベントとは一切関係なく開発意欲は突然湧き上がってくるもので、&lt;/p>
&lt;ul>
&lt;li>使い慣れてたので Tailwind CSS を使ってたけど、1 ページだけのアプリに Tailwind はやりすぎ感があった&lt;/li>
&lt;li>Elm アプリに対してもっと簡単に導入できる CSS はないだろうかと考えてた
&lt;ul>
&lt;li>最近 Pico.css というものの存在を知って使ってみたくなった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>どうせ開発するならグリーンバックとか作っちゃえ&lt;/li>
&lt;li>どうせ開発するならヘルプとか作って使いやすくしたい&lt;/li>
&lt;/ul>
&lt;p>と週末に思いついたことをガンガン作ってみた。&lt;/p>
&lt;p>ひとまず、やりたいことはやったかな。
あとはもし誰かからフィードバックがあったら考えよう。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="技術について"
>
技術について
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2021/08/sync-timer/#技術について" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 技術について" href="#%e6%8a%80%e8%a1%93%e3%81%ab%e3%81%a4%e3%81%84%e3%81%a6">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>言語、フレームワークなど技術的な要素は次のようなものです。&lt;/p>
&lt;ul>
&lt;li>&lt;a
class="gblog-markdown__link"
href="https://elm-lang.org/"
>Elm&lt;/a> 0.19.1
&lt;ul>
&lt;li>関数型プログラミング言語&lt;/li>
&lt;li>TEA (The Elm Architecture)&lt;/li>
&lt;li>0.19.0 がリリースされたのが 2018 年。 0.19.1 が 2019 年。なんかもうこれで慣れてきた。&lt;/li>
&lt;li>未体験の方はぜひ一度触ってみて欲しい。エラーメッセージの丁寧さは群を抜いている。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a
class="gblog-markdown__link"
href="https://picocss.com/"
>Pico.css&lt;/a> master(2021-08-13)
&lt;ul>
&lt;li>ミニマル CSS フレームワーク&lt;/li>
&lt;li>&lt;code>div&lt;/code> とかではなく &lt;code>main&lt;/code>, &lt;code>section&lt;/code>, &lt;code>article&lt;/code> など適切な HTML を書くことで自然にスタイルが適用されるように設計されている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a
class="gblog-markdown__link"
href="https://v2.parceljs.org/"
>Parcel 2&lt;/a>
&lt;ul>
&lt;li>設定ファイルの（ほぼ）不要なビルドツール&lt;/li>
&lt;li>Elm にも対応している&lt;/li>
&lt;li>昨年の段階で使っていた v1 が非推奨になったので v2 へ変更したが、 &lt;code>2.0.0-rc.0&lt;/code> が最新だった。正式版をリリースしてから旧バージョンを非推奨にしたほうが良いのでは…？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a
class="gblog-markdown__link"
href="https://www.netlify.com/"
>Netlify&lt;/a>
&lt;ul>
&lt;li>Github と連携すると Github Actions なしでもある程度の CI, CD を行ってくれるホスティングサービス&lt;/li>
&lt;li>静的ホスティングだけなら 10 サイトまで無料で公開できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="振り返って"
>
振り返って
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2021/08/sync-timer/#振り返って" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 振り返って" href="#%e6%8c%af%e3%82%8a%e8%bf%94%e3%81%a3%e3%81%a6">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="ユーザーテストをしていない"
>
ユーザーテストをしていない
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2021/08/sync-timer/#ユーザーテストをしていない" class="gblog-post__anchor clip flex align-center" aria-label="Anchor ユーザーテストをしていない" href="#%e3%83%a6%e3%83%bc%e3%82%b6%e3%83%bc%e3%83%86%e3%82%b9%e3%83%88%e3%82%92%e3%81%97%e3%81%a6%e3%81%84%e3%81%aa%e3%81%84">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>本来ならちゃんと動いて満足行く出来になっているかユーザーにテストしてもらいたいのだが、そもそもユーザーを捕まえてテストしようとしていない。&lt;/p>
&lt;p>誰か使ってみてくれないか。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="elm-と-css"
>
Elm と CSS
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2021/08/sync-timer/#elm-と-css" class="gblog-post__anchor clip flex align-center" aria-label="Anchor Elm と CSS" href="#elm-%e3%81%a8-css">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>関数型プログラミング言語のため、 &lt;a
class="gblog-markdown__link"
href="https://github.com/rtfeldman/elm-css"
>elm-css&lt;/a> などで型付きの CSS 記述(CSS-in-JS)をするなどの選択肢も考えられる。&lt;/p>
&lt;p>今回は CSS フレームワークに乗っかって手軽に書きたいという考えで、敢えて CSS を分離することにしてみた。
個人的にはこれもありだと感じている。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h3 id="技術を試す"
>
技術を試す
&lt;/h3>
&lt;a data-clipboard-text="https://mather.github.io/posts/2021/08/sync-timer/#技術を試す" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 技術を試す" href="#%e6%8a%80%e8%a1%93%e3%82%92%e8%a9%a6%e3%81%99">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>不利益をもたらさない小さなサービスで新しい技術要素や実験的な試みをするのは大事だと改めて思った。&lt;/p>
&lt;div class="flex align-center gblog-post__anchorwrap">
&lt;h2 id="小ネタ"
>
小ネタ
&lt;/h2>
&lt;a data-clipboard-text="https://mather.github.io/posts/2021/08/sync-timer/#小ネタ" class="gblog-post__anchor clip flex align-center" aria-label="Anchor 小ネタ" href="#%e5%b0%8f%e3%83%8d%e3%82%bf">
&lt;svg class="gblog-icon gblog_link">&lt;use xlink:href="#gblog_link">&lt;/use>&lt;/svg>
&lt;/a>
&lt;/div>
&lt;p>タイマーのフォントは「D-DIN」。
きっかけとなった VTuber の初回配信のカウントダウンに使われているフォント（だと思う）。&lt;/p></content><category scheme="https://mather.github.io/tags/%E6%8A%80%E8%A1%93" term="%E6%8A%80%E8%A1%93" label="技術"/><category scheme="https://mather.github.io/tags/Elm" term="Elm" label="Elm"/><category scheme="https://mather.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9" term="%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9" label="サービス"/><category scheme="https://mather.github.io/tags/SyncTimer" term="SyncTimer" label="SyncTimer"/></entry></feed>